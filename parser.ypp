%{
        #include "hw3_output.hpp"
        #include "semantic.h"
        #include <iostream>
        #include <stdlib.h>

        using namespace std;
        using namespace output;

	extern int yylex();
        extern int yylineno;
	int yyerror(const char * message);
%}

#define YYSTYPE Node*

%nonassoc VOID INT BYTE B BOOL
%left ID NUM STRING
%right ASSIGN
%left OR
%left AND
%nonassoc TRUE FALSE RETURN IF WHILE BREAK CONTINUE COMMA LBRACE RBRACE
%left RELOP_EQ
%left RELOP
%left BINOP
%left BINOP_MUL_DIV
%right NOT
%left LPAREN
%left RPAREN
%left SC
%nonassoc ELSE

%%

Program :  OPEN_SCOPE Funcs {sem->findMain();sem->closeScope(); delete sem;}

Funcs   :/* Epsilon */
        |FuncDecl Funcs

FuncDecl:RetType ID LPAREN Formals RPAREN LBRACE {sem->declareFunction($1, $2, $4);} Statements RBRACE {sem->closeScope();}   

RetType :Type {$$ = new Type($1);}
        |VOID {$$ = new Type(V_VOID);}
 
Formals :/* Epsilon */ {$$ = new Formals();}
        |FormalsList {$$ = new Formals($1);}

FormalsList : FormalDecl {$$ = new FormalsList($1);} 
            | FormalDecl COMMA FormalsList {$$ = new FormalsList($1, $3);}

FormalDecl  :Type ID {$$ = new FormalDecl($1, $2);}

Statements  :Statement
            |Statements Statement

Statement   :LBRACE OPEN_SCOPE Statements {sem->closeScope();} RBRACE 
        |Type ID SC {$$ = new Statement($1,$2);}
        |Type ID ASSIGN Exp SC {$$ = new Statement($1,$2,$4);}
        |ID ASSIGN Exp SC {$$ = new Statement($1,$3);}
        |Call SC {$$ = new Statement($1);}
        |RETURN SC {$$ = new Statement($1);}
        |RETURN Exp SC {$$ = new Statement($1,$2);}
        |IF LPAREN Exp RPAREN Statement {$$ = new Statement($1,$3,$5);}
        |IF LPAREN Exp RPAREN Statement ELSE Statement {$$ = new Statement($3,$5,$7);}
        |WHILE WHILE_M LPAREN Exp RPAREN Statement {$$ = new Statement($1,$4,$6);}
        |BREAK SC {$$ = new Statement($1);}
        |CONTINUE SC {$$ = new Statement($1);}

WHILE_M : /*epsilon*/ {sem->start_while();}

Call    :ID LPAREN ExpList RPAREN {$$ = new Call($1,$3);}
        |ID LPAREN RPAREN {$$ = new Call($1);}

ExpList :Exp {$$ = new Explist($1);}
        |Exp COMMA ExpList {$$ = new Explist($1,$3);}

Type    :INT {$$ = new Type(V_INT);}
        |BYTE {$$ = new Type(V_BYTE);}
        |BOOL {$$ = new Type(V_BOOL);}

Exp :LPAREN Exp RPAREN {$$ = new Exp ($2);}
    |Exp IF LPAREN Exp RPAREN ELSE Exp {$$ = new Exp ($1, $4, $7);}
    |Exp BINOP Exp {$$ = new Exp ($1, $2, $3);}
    |Exp BINOP_MUL_DIV Exp {$$ = new Exp ($1, $2, $3);}
    |ID {$$ = new Exp ($1);}
    |Call {$$ = new Exp ($1);}
    |NUM {$$ = new Exp ($1);}
    |NUM B {$$ = new Exp ($1, $2);}
    |STRING {$$ = new Exp ($1);}
    |TRUE {$$ = new Exp ($1);}
    |FALSE {$$ = new Exp ($1);}
    |NOT Exp {$$ = new Exp ($1, $2);}
    |Exp AND Exp {$$ = new Exp(V_BOOL, $1, $2, $3);}
    |Exp OR Exp {$$ = new Exp(V_BOOL, $1, $2, $3);}
    |Exp RELOP Exp {$$ = new Exp (V_BOOL, $1, $2, $3);}
    |Exp RELOP_EQ Exp {$$ = new Exp (V_BOOL, $1, $2, $3);}
    |LPAREN Type RPAREN Exp {$$ = new Exp ($2, $4);} 


OPEN_SCOPE : /*epsilon */ {sem->openScope();}
%%

int main()
{
        yyparse();
}

int yyerror(const char * message)
{
	errorSyn(yylineno);
}
